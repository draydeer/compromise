"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var const_1 = require("./const");
function es5Class() {
    return function (target) {
        return /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var _this = _super.call(this, args) || this;
                Object.setPrototypeOf(_this, target.prototype);
                return _this;
            }
            return class_1;
        }(target));
    };
}
exports.es5Class = es5Class;
function arrAssignArrayLike(target, a, b, c, d, e, f, g, h) {
    var i, j, l, m, length;
    for (i = 1, l = arguments.length, length = 0; i < l; i++) {
        var argv = arguments[i];
        if (argv && argv.length) {
            for (j = 0, m = argv.length; j < m; j++, length++) {
                target[length] = argv[j];
            }
        }
    }
    target.length = length;
    return target;
}
exports.arrAssignArrayLike = arrAssignArrayLike;
function arrAssignArrayLikeSingle(target, source) {
    var i, l;
    for (i = 0, l = target.length = source.length; i < l; i++) {
        target[i] = source[i];
    }
    return target;
}
exports.arrAssignArrayLikeSingle = arrAssignArrayLikeSingle;
function arrCopySingle(source, ctx) {
    var i, l, target = ctx || new Array(source.length);
    for (i = 0, l = ctx ? ctx.length = source.length : source.length; i < l; i++) {
        target[i] = source[i];
    }
    return target;
}
exports.arrCopySingle = arrCopySingle;
function arrMerge(a, b, c, d, e, f, g, h) {
    var i, j, l, m, target = [];
    for (i = 0, l = arguments.length; i < l; i++) {
        var argv = arguments[i];
        if (argv && argv.length) {
            for (j = 0, m = argv.length; j < m; j++) {
                target.push(argv[j]);
            }
        }
    }
    return target;
}
exports.arrMerge = arrMerge;
function arrPatchCompare(target, source) {
    var i, l, patch = {};
    for (i = 0, l = source.length; i <= l; i++) {
        var v = source[i];
        if (v !== target[i]) {
            patch[i] = v && typeof v === const_1.OBJECT ? arrObjClone(source[i]) : v;
        }
    }
    return patch;
}
exports.arrPatchCompare = arrPatchCompare;
function objAssign(target, a, b, c, d, e, f, g, h) {
    var i, j, k, l, m;
    for (i = 1, l = arguments.length; i < l; i++) {
        var argv = arguments[i];
        if (argv) {
            var keys = Object.keys(argv);
            for (j = 0, k = keys[0], m = keys.length; j < m; k = keys[++j]) {
                target[k] = argv[k];
            }
        }
    }
    return target;
}
exports.objAssign = objAssign;
function objAssignSingle(target, source) {
    var i = 0, keys = Object.keys(source), k = keys[0], l = keys.length;
    for (; i < l; k = keys[++i]) {
        target[k] = source[k];
    }
    return target;
}
exports.objAssignSingle = objAssignSingle;
function objCopySingle(source, ctx) {
    var i = 0, keys = Object.keys(source), k = keys[0], l = keys.length, target = ctx || {};
    for (; i < l; k = keys[++i]) {
        target[k] = source[k];
    }
    return target;
}
exports.objCopySingle = objCopySingle;
function objMerge(a, b, c, d, e, f, g, h) {
    var i, j, k, l, m, target = {};
    for (i = 0, l = arguments.length; i < l; i++) {
        var argv = arguments[i];
        if (argv) {
            var keys = Object.keys(argv);
            for (j = 0, k = keys[0], m = keys.length; j < m; k = keys[++j]) {
                target[k] = argv[k];
            }
        }
    }
    return target;
}
exports.objMerge = objMerge;
function objPatchCompare(target, source) {
    var i = 0, keys = Object.keys(source), k = keys[0], l = keys.length, patch = {};
    for (; i < l; k = keys[++i]) {
        var v = source[k];
        if (v !== target[k]) {
            patch[k] = v && typeof v === const_1.OBJECT ? arrObjClone(source[k]) : v;
        }
    }
    return patch;
}
exports.objPatchCompare = objPatchCompare;
function arrObjClone(source) {
    return source instanceof Array ? arrCopySingle(source) : objCopySingle(source);
}
exports.arrObjClone = arrObjClone;
function arrObjFreeze(source) {
    if (source) {
        if (Array.isArray(source)) {
            var i = void 0, l = void 0, v = void 0;
            for (i = 0, l = source.length; i < l; i++) {
                v = source[i];
                if (v && typeof v === const_1.OBJECT && false === Object.isFrozen(v)) {
                    arrObjFreeze(v);
                }
            }
            if (false === Object.isFrozen(source)) {
                Object.freeze(source);
            }
        }
        else {
            var i = 0, keys = Object.keys(source), k = keys[0], l = keys.length, v = void 0;
            for (; i < l; k = keys[++i]) {
                v = source[k];
                if (v && typeof v === const_1.OBJECT && false === Object.isFrozen(v)) {
                    arrObjFreeze(v);
                }
            }
            if (false === Object.isFrozen(source)) {
                Object.freeze(source);
            }
        }
    }
    return source;
}
exports.arrObjFreeze = arrObjFreeze;
var Context;
(function (Context) {
    Context.getSetKeysCache = [];
    Context.isDevMode = process ? process.env.NODE_ENV === 'dev' : window['INVARY_ENV'] === 'dev';
})(Context = exports.Context || (exports.Context = {}));
function anyGetInContext(key, def) {
    var self = this;
    var keys = Context.getSetKeysCache = key instanceof Array ? key : key.split(".");
    var i, l;
    for (i = 0, l = keys.length - 1; i < l; i++) {
        var v = self[keys[i]];
        if (v && typeof v === const_1.OBJECT) {
            self = v;
        }
        else {
            return def;
        }
    }
    return keys[i] in self ? self[keys[i]] : def;
}
exports.anyGetInContext = anyGetInContext;
function specialize(copier, beforeReturnCb) {
    var copySet = new Set();
    function set(ctx, key, val) {
        if (anyGetInContext.call(ctx, key) === val) {
            return ctx;
        }
        return setByGetSetKeysCache(ctx, val);
    }
    function setInContext(key, val) {
        if (anyGetInContext.call(this, key) === val) {
            return this;
        }
        return setByGetSetKeysCache(this, val);
    }
    function setByGetSetKeysCache(ctx, val) {
        var root, self = root = copier.call(ctx, ctx);
        var i, l;
        for (i = 0, l = Context.getSetKeysCache.length - 1; i < l; i++) {
            var v = self[Context.getSetKeysCache[i]];
            self = self[Context.getSetKeysCache[i]] = (v && typeof v === const_1.OBJECT) ? arrObjClone(v) : {};
        }
        self[Context.getSetKeysCache[i]] = val;
        if (beforeReturnCb) {
            beforeReturnCb.call(root);
        }
        Context.getSetKeysCache = null;
        return root;
    }
    function setPatch(ctx, key, val) {
        if (anyGetInContext.call(ctx, key) === val) {
            return {};
        }
        var root, self = root = (_a = {}, _a[Context.getSetKeysCache[0]] = ctx[Context.getSetKeysCache[0]], _a);
        var i, l;
        for (i = 0, l = Context.getSetKeysCache.length - 1; i < l; i++) {
            var v = self[Context.getSetKeysCache[i]];
            self = self[Context.getSetKeysCache[i]] = (v && typeof v === const_1.OBJECT) ? arrObjClone(v) : {};
        }
        self[Context.getSetKeysCache[i]] = val;
        if (beforeReturnCb) {
            beforeReturnCb.call(root);
        }
        Context.getSetKeysCache = null;
        return root;
        var _a;
    }
    function all(ctx, a, b, c, d, e, f, g, h) {
        if (arguments.length < 4) {
            return set(ctx, a, b);
        }
        var root = ctx;
        var self;
        var i, j, l, m;
        copySet.clear();
        for (i = 1, l = arguments.length; i < l; i += 2) {
            if (anyGetInContext.call(ctx, arguments[i]) === arguments[i + 1]) {
                continue;
            }
            if (root === ctx) {
                self = root = copier.call(ctx, ctx);
            }
            else {
                self = root;
            }
            for (j = 0, m = Context.getSetKeysCache.length - 1; j < m; j++) {
                var v = self[Context.getSetKeysCache[j]];
                if (v && typeof v === const_1.OBJECT) {
                    if (false === copySet.has(v)) {
                        self = self[Context.getSetKeysCache[j]] = arrObjClone(v);
                        copySet.add(self);
                    }
                    else {
                        self = v;
                    }
                }
                else {
                    self = self[Context.getSetKeysCache[j]] = {};
                }
            }
            self[Context.getSetKeysCache[j]] = arguments[i + 1];
        }
        if (beforeReturnCb) {
            beforeReturnCb.call(root);
        }
        Context.getSetKeysCache = null;
        return root;
    }
    function allInContext(a, b, c, d, e, f, g, h) {
        if (arguments.length < 3) {
            return set(this, a, b);
        }
        var root = this;
        var self;
        var i, j, l, m;
        copySet.clear();
        for (i = 0, l = arguments.length; i < l; i += 2) {
            if (anyGetInContext.call(this, arguments[i]) === arguments[i + 1]) {
                continue;
            }
            if (root === this) {
                self = root = copier.call(this, this);
            }
            else {
                self = root;
            }
            for (j = 0, m = Context.getSetKeysCache.length - 1; j < m; j++) {
                var v = self[Context.getSetKeysCache[j]];
                if (v && typeof v === const_1.OBJECT) {
                    if (false === copySet.has(v)) {
                        self = self[Context.getSetKeysCache[j]] = arrObjClone(v);
                        copySet.add(self);
                    }
                    else {
                        self = v;
                    }
                }
                else {
                    self = self[Context.getSetKeysCache[j]] = {};
                }
            }
            self[Context.getSetKeysCache[j]] = arguments[i + 1];
        }
        if (beforeReturnCb) {
            beforeReturnCb.call(root);
        }
        Context.getSetKeysCache = null;
        return root;
    }
    function allPatch(ctx, a, b, c, d, e, f, g, h) {
        if (arguments.length < 4) {
            return setPatch(ctx, a, b);
        }
        var root = {};
        var self;
        var i, j, l, m;
        copySet.clear();
        for (i = 1, l = arguments.length; i < l; i += 2) {
            if (anyGetInContext.call(ctx, arguments[i]) === arguments[i + 1]) {
                continue;
            }
            self = root;
            if (false === Context.getSetKeysCache[0] in self) {
                self[Context.getSetKeysCache[0]] = ctx[Context.getSetKeysCache[0]];
            }
            for (j = 0, m = Context.getSetKeysCache.length - 1; j < m; j++) {
                var v = self[Context.getSetKeysCache[j]];
                if (v && typeof v === const_1.OBJECT) {
                    if (false === copySet.has(v)) {
                        self = self[Context.getSetKeysCache[j]] = arrObjClone(v);
                        copySet.add(self);
                    }
                    else {
                        self = v;
                    }
                }
                else {
                    self = self[Context.getSetKeysCache[j]] = {};
                }
            }
            self[Context.getSetKeysCache[j]] = arguments[i + 1];
        }
        if (beforeReturnCb) {
            beforeReturnCb.call(root);
        }
        Context.getSetKeysCache = null;
        return root;
    }
    return {
        set: set,
        setByGetSetKeysCache: setByGetSetKeysCache,
        setInContext: setInContext,
        setPatch: setPatch,
        all: all,
        allInContext: allInContext,
        allPatch: allPatch,
    };
}
exports.specialize = specialize;
function specializeArr(copier, beforeReturnCb) {
    function deleteIndexInContext(start, count) {
        if (start !== void 0 && start < this.length && start > -1) {
            var countToDelete = count || 1;
            var root = copier.call(this, this), i = void 0, l = void 0;
            for (i = start, l = this.length - countToDelete; i < l; i++) {
                root[i] = root[i + countToDelete];
            }
            for (i = 0; i < countToDelete; i++) {
                Array.prototype.pop.call(root);
            }
            if (beforeReturnCb) {
                beforeReturnCb.call(root);
            }
            return root;
        }
        return this;
    }
    function insertIndexInContext(start, a, b, c, d, e, f, g, h) {
        if (start !== void 0 && start < this.length && start > -1) {
            var countToInsert = arguments.length - 1;
            var root = copier.call(this, this), i = void 0, l = void 0;
            for (i = 0; i < countToInsert; i++) {
                Array.prototype.push.call(root, null);
            }
            for (i = this.length - 1, l = start; i >= l; i--) {
                root[i + countToInsert] = root[i];
            }
            for (i = 0; i < countToInsert; i++) {
                root[start + i] = arguments[i + 1];
            }
            return root;
        }
        return this;
    }
    function popInContext() {
        var root = copier.call(this, this);
        var result = Array.prototype.pop.apply(root);
        return [root, result];
    }
    return {
        deleteIndexInContext: deleteIndexInContext,
        insertIndexInContext: insertIndexInContext,
        popInContext: popInContext,
    };
}
exports.specializeArr = specializeArr;
//# sourceMappingURL=data:application/json;base64,