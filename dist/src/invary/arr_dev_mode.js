"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var lib_1 = require("../lib");
var lib_2 = require("../lib");
exports.Arr = function (value) {
    return new ArrInvary(value);
};
var specialized = lib_2.specialize(lib_1.arrCopySingle);
exports.arrSet = specialized.set;
exports.arrSetPatch = specialized.setPatch;
exports.arrAll = specialized.all;
exports.arrAllPatch = specialized.allPatch;
var mutables = new Array(32);
var mutableCurrent = false;
var mutableDevMode = lib_1.Context.isDevMode;
var mutableIndex = 0;
function ArrInvary(arr, noFreeze) {
    if (arr) {
        lib_1.arrCopySingle(arr, this);
    }
    if (true !== noFreeze) {
        lib_1.arrObjFreeze(this);
    }
}
exports.ArrInvary = ArrInvary;
var ArrInvaryProto = function () { };
var specializedArrInvary = lib_2.specialize(function () {
    if (mutableCurrent === true) {
        mutableCurrent = new ArrInvary(this, true);
        return mutableCurrent;
    }
    return mutableCurrent || new ArrInvary(this, true);
}, function () {
    if (!mutableCurrent) {
        this.freeze();
    }
});
ArrInvaryProto.prototype = Array.prototype;
ArrInvary.prototype = lib_1.objAssignSingle(new ArrInvaryProto(), {
    constructor: Array.prototype.constructor,
    all: specializedArrInvary.allInContext,
    get: lib_1.anyGetInContext,
    set: specializedArrInvary.setInContext,
    batch: function (callback) {
        mutables[++mutableIndex] = mutableCurrent;
        mutableCurrent = true;
        mutableDevMode = false;
        var result = callback(this);
        mutableCurrent = mutables[--mutableIndex];
        if (mutableIndex === 0) {
            mutableDevMode = lib_1.Context.isDevMode;
            if (result.freeze) {
                result.freeze();
            }
        }
        return result;
    },
    freeze: function () {
        return lib_1.arrObjFreeze(this);
    },
    deleteIndex: function (start, count) {
        if (start !== void 0 && start < this.length && start > -1) {
            var countToDelete = count || 1;
            if (mutableCurrent) {
                var i_1, l_1;
                if (mutableCurrent === true) {
                    mutableCurrent = new ArrInvary(this, true);
                }
                mutableCurrent[start] = null;
                for (i_1 = start, l_1 = this.length - countToDelete; i_1 < l_1; i_1++) {
                    mutableCurrent[i_1] = mutableCurrent[i_1 + countToDelete];
                }
                for (i_1 = 0; i_1 < countToDelete; i_1++) {
                    Array.prototype.pop.call(mutableCurrent);
                }
                return mutableCurrent;
            }
            var copy = new ArrInvary(this, true), i = void 0, l = void 0;
            for (i = start, l = this.length - countToDelete; i < l; i++) {
                copy[i] = copy[i + countToDelete];
            }
            for (i = 0; i < countToDelete; i++) {
                Array.prototype.pop.call(copy);
            }
            copy.freeze();
            return copy;
        }
        return this;
    },
    insertIndex: function (start, a, b, c, d, e, f, g, h) {
        if (start !== void 0 && start < this.length && start > -1) {
            var countToInsert = arguments.length - 1;
            if (mutableCurrent) {
                var i_2, l_2;
                if (mutableCurrent === true) {
                    mutableCurrent = new ArrInvary(this, true);
                }
                for (i_2 = 0; i_2 < countToInsert; i_2++) {
                    Array.prototype.push.call(mutableCurrent, null);
                }
                for (i_2 = this.length - 1, l_2 = start; i_2 >= l_2; i_2--) {
                    mutableCurrent[i_2 + countToInsert] = mutableCurrent[i_2];
                }
                for (i_2 = 0; i_2 < countToInsert; i_2++) {
                    mutableCurrent[start + i_2] = arguments[i_2 + 1];
                }
                return mutableCurrent;
            }
            var copy = new ArrInvary(this, true), i = void 0, l = void 0;
            for (i = 0; i < countToInsert; i++) {
                Array.prototype.push.call(copy, null);
            }
            for (i = this.length - 1, l = start; i >= l; i--) {
                copy[i + countToInsert] = copy[i];
            }
            for (i = 0; i < countToInsert; i++) {
                copy[start + i] = arguments[i + 1];
            }
            copy.freeze();
            return copy;
        }
        return this;
    },
    isArr: function (val) { return val instanceof ArrInvary; },
    pop: function () {
        if (mutableCurrent) {
            if (mutableCurrent === true) {
                mutableCurrent = new ArrInvary(this, true);
            }
            return [mutableCurrent, Array.prototype.pop.apply(mutableCurrent)];
        }
        var copy = new ArrInvary(this, true);
        var result = Array.prototype.pop.apply(copy);
        copy.freeze();
        return [copy, result];
    },
    push: function (a, b, c, d, e, f, g, h) {
        if (mutableCurrent) {
            if (mutableCurrent === true) {
                mutableCurrent = new ArrInvary(this, true);
            }
            return [mutableCurrent, Array.prototype.push.apply(mutableCurrent, arguments)];
        }
        var copy = new ArrInvary(this, true);
        var result = Array.prototype.push.apply(copy, arguments);
        copy.freeze();
        return [copy, result];
    },
    slice: function (begin, end) {
        return new ArrInvary(Array.prototype.slice.call(this, begin, end));
    },
    shift: function () {
        if (mutableCurrent) {
            if (mutableCurrent === true) {
                mutableCurrent = new ArrInvary(this, true);
            }
            return [mutableCurrent, Array.prototype.shift.apply(mutableCurrent)];
        }
        var copy = new ArrInvary(this, true);
        var result = Array.prototype.shift.apply(copy);
        if (!mutableCurrent) {
            copy.freeze();
        }
        return [copy, result];
    },
    splice: function (start, deleteCount, a, b, c, d, e, f, g, h) {
        if (mutableCurrent) {
            if (mutableCurrent === true) {
                mutableCurrent = new ArrInvary(this, true);
            }
            return [mutableCurrent, Array.prototype.splice.apply(mutableCurrent, arguments)];
        }
        var copy = new ArrInvary(this, true);
        var result = Array.prototype.splice.apply(copy, arguments);
        if (!mutableCurrent) {
            copy.freeze();
        }
        return [copy, result];
    },
    toJSON: function () {
        return Array.prototype.constructor.apply(this, this);
    },
    unshift: function (a, b, c, d, e, f, g, h) {
        if (mutableCurrent) {
            if (mutableCurrent === true) {
                mutableCurrent = new ArrInvary(this, true);
            }
            return [mutableCurrent, Array.prototype.unshift.apply(mutableCurrent, arguments)];
        }
        var copy = new ArrInvary(this, true);
        var result = Array.prototype.unshift.apply(copy, arguments);
        copy.freeze();
        return [copy, result];
    },
});
exports.isArr = ArrInvary.prototype.isArr;
//# sourceMappingURL=data:application/json;base64,