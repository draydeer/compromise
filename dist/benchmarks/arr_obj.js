"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var src_1 = require("../src");
var src_2 = require("../src");
var time, timeSpentNew, timeSpentOld;
function percent() {
    console.log('==============================');
    if (timeSpentOld < timeSpentNew) {
        console.log((timeSpentNew / timeSpentOld * 100 - 100) + '% faster');
    }
    else {
        console.log((timeSpentOld / timeSpentNew * 100 - 100) + '% slower');
    }
    console.log('==============================');
    console.log();
}
function start() {
    time = new Date().getTime();
}
function stop(title, ops) {
    timeSpentOld = timeSpentNew;
    timeSpentNew = new Date().getTime() - time;
    console.log('------------------------------');
    console.info(title);
    console.log();
    console.log('Total ops.: ' + ops);
    console.log('Time spent: ' + timeSpentNew + ' ms');
    console.log('Ops. per second: ' + (1000 / timeSpentNew * ops));
    console.log('Time per single op.: ' + (timeSpentNew / ops) + ' ms');
    console.log();
}
var a = src_2.Obj({ a: 0, b: { b0: 1, b1: { b10: 1, b11: { b110: 1, b111: 2 } } }, c: 2, d: 3, e: 4, f: 5, g: 6, h: 7, i: 8, j: 9 });
var b = src_1.Arr([0, { b0: 1, b1: { b10: 1, b11: { b110: 1, b111: 2 } } }, 2, 3, 4, 5, 6, 7, 8, 9]);
var arrKey1 = [0];
var arrKey2 = [1, 'b1', 'b11', 'b111'];
var objKey1 = ['a'];
var objKey2 = ['b', 'b1', 'b11', 'b111'];
// Arr (path - 0) get existing index
start();
for (var i = 0; i < 10000000; i++) {
    b.get([0]);
}
stop('Arr (path - 0) get existing index', 10000000);
// Arr (path - 1.b1.b11.b111) get existing index
start();
for (var i = 0; i < 10000000; i++) {
    b.get([1, 'b1', 'b11', 'b111']);
}
stop('Arr (path - 1.b1.b11.b111) get existing index', 10000000);
// Arr (path - 0) set existing index with same value
start();
for (var i = 0; i < 10000000; i++) {
    b.set([0], 0);
}
stop('Arr (path - 0) set existing index with same value', 10000000);
// Arr (path - 1.b1.b11.b111) set existing index with same value
start();
for (var i = 0; i < 10000000; i++) {
    b.set([1, 'b1', 'b11', 'b111'], 2);
}
stop('Arr (path - 1.b1.b11.b111) set existing index with same value', 10000000);
// Arr (path - 0, 10 props to be copied) set existing index with new value
start();
for (var i = 0; i < 10000000; i++) {
    b.set([0], 1);
}
stop('Arr (path - 0, 10 props to be copied) set existing index with new value', 10000000);
// Arr (path - 1.b1.b11.b111, 14 props to be copied) set existing index with new value
start();
for (var i = 0; i < 10000000; i++) {
    b.set([1, 'b1', 'b11', 'b111'], 3);
}
stop('Arr (path - 1.b1.b11.b111, 14 props to be copied) set existing index with new value', 10000000);
// Obj (path - a) get existing key
start();
for (var i = 0; i < 10000000; i++) {
    a.get(['a']);
}
stop('Obj (path - a) get existing key', 10000000);
// Obj (path - b.b1.b11.b111) get existing key
start();
for (var i = 0; i < 10000000; i++) {
    a.get(['b', 'b1', 'b11', 'b111']);
}
stop('Obj (path - b.b1.b11.b111) get existing key', 10000000);
// Obj (path - a) set existing key with same value
start();
for (var i = 0; i < 10000000; i++) {
    a.set(['a'], 0);
}
stop('Obj (path - a) set existing key with same value', 10000000);
// Obj (path - b.b1.b11.b111) set existing key with same value
start();
for (var i = 0; i < 10000000; i++) {
    a.set(['b', 'b1', 'b11', 'b111'], 2);
}
stop('Obj (path - b.b1.b11.b111) set existing key with same value', 10000000);
// Obj (path - a, 10 props to be copied) set existing key with new value
start();
for (var i = 0; i < 10000000; i++) {
    a.set(['a'], 1);
}
stop('Obj (path - a, 10 props to be copied) set existing key with new value', 10000000);
// Obj (path - b.b1.b11.b111, 14 props to be copied) set existing key with new value
start();
for (var i = 0; i < 10000000; i++) {
    a.set(['b', 'b1', 'b11', 'b111'], 3);
}
stop('Obj (path - b.b1.b11.b111, 14 props to be copied) set existing key with new value', 10000000);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyX29iai5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2JlbmNobWFya3MvYXJyX29iai50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhCQUVnQjtBQUNoQiw4QkFFZ0I7QUFFaEIsSUFBSSxJQUFJLEVBQUUsWUFBWSxFQUFFLFlBQVksQ0FBQztBQUVyQztJQUNJLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztJQUU5QyxFQUFFLENBQUMsQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsWUFBWSxHQUFHLFlBQVksR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFlBQVksR0FBRyxZQUFZLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7SUFDOUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2xCLENBQUM7QUFFRDtJQUNJLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2hDLENBQUM7QUFFRCxjQUFjLEtBQUssRUFBRSxHQUFHO0lBQ3BCLFlBQVksR0FBRyxZQUFZLENBQUM7SUFFNUIsWUFBWSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDO0lBRTNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztJQUM5QyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BCLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxHQUFHLFlBQVksR0FBRyxLQUFLLENBQUMsQ0FBQztJQUNuRCxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixHQUFHLENBQUMsSUFBSSxHQUFHLFlBQVksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQy9ELE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLEdBQUcsQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDcEUsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2xCLENBQUM7QUFJRCxJQUFJLENBQUMsR0FBRyxTQUFHLENBQUMsRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQztBQUN2SCxJQUFJLENBQUMsR0FBRyxTQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFF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